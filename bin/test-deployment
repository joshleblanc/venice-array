#!/usr/bin/env bash

# Deployment Test Script
# This script helps test your deployment setup locally before using GitHub Actions

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

echo "🧪 Deployment Test Suite"
echo "========================"
echo ""

# Test 1: Check if we're in the right directory
test_project_structure() {
    print_info "Testing project structure..."
    
    if [ ! -f "config/deploy.yml" ]; then
        print_error "config/deploy.yml not found"
        return 1
    fi
    
    if [ ! -f ".kamal/secrets" ]; then
        print_error ".kamal/secrets not found"
        return 1
    fi
    
    if [ ! -f "Dockerfile" ]; then
        print_error "Dockerfile not found"
        return 1
    fi
    
    print_status "Project structure is correct"
}

# Test 2: Check Kamal installation and configuration
test_kamal_config() {
    print_info "Testing Kamal configuration..."
    
    if ! command -v kamal &> /dev/null; then
        print_warning "Kamal not installed. Installing..."
        gem install kamal
    fi
    
    if kamal config &> /dev/null; then
        print_status "Kamal configuration is valid"
    else
        print_error "Kamal configuration is invalid"
        kamal config
        return 1
    fi
}

# Test 3: Check environment variables
test_environment_variables() {
    print_info "Testing environment variables..."
    
    if [ -z "$KAMAL_REGISTRY_PASSWORD" ]; then
        print_warning "KAMAL_REGISTRY_PASSWORD not set in environment"
    else
        print_status "KAMAL_REGISTRY_PASSWORD is set"
    fi
    
    if [ -f "config/credentials/production.key" ]; then
        print_status "Rails master key file exists"
    else
        print_warning "Rails master key file not found"
    fi
}

# Test 4: Test SSH connections
test_ssh_connections() {
    print_info "Testing SSH connections..."
    
    # Test web server
    if ssh -o ConnectTimeout=10 -o BatchMode=yes root@138.197.155.169 "echo 'Web server connection test'" &> /dev/null; then
        print_status "Web server SSH connection: OK"
    else
        print_warning "Web server SSH connection: FAILED (check your SSH keys)"
    fi
    
    # Test builder server
    if ssh -o ConnectTimeout=10 -o BatchMode=yes root@165.227.38.242 "echo 'Builder connection test'" &> /dev/null; then
        print_status "Builder SSH connection: OK"
    else
        print_warning "Builder SSH connection: FAILED (check your SSH keys)"
    fi
}

# Test 5: Test Docker registry access
test_registry_access() {
    print_info "Testing Docker registry access..."
    
    if [ -z "$KAMAL_REGISTRY_PASSWORD" ]; then
        print_warning "Cannot test registry access - KAMAL_REGISTRY_PASSWORD not set"
        return
    fi
    
    if echo "$KAMAL_REGISTRY_PASSWORD" | docker login registry.jleb.dev -u admin --password-stdin &> /dev/null; then
        print_status "Docker registry access: OK"
        docker logout registry.jleb.dev &> /dev/null
    else
        print_error "Docker registry access: FAILED"
    fi
}

# Test 6: Validate GitHub Actions workflow
test_github_workflow() {
    print_info "Testing GitHub Actions workflow syntax..."
    
    if [ ! -f ".github/workflows/deploy.yml" ]; then
        print_error "GitHub Actions deploy workflow not found"
        return 1
    fi
    
    # Basic YAML syntax check
    if command -v yamllint &> /dev/null; then
        if yamllint .github/workflows/deploy.yml &> /dev/null; then
            print_status "GitHub Actions workflow syntax: OK"
        else
            print_warning "GitHub Actions workflow has syntax issues"
        fi
    else
        print_info "yamllint not available, skipping syntax check"
    fi
}

# Test 7: Dry run deployment
test_dry_run() {
    print_info "Testing Kamal dry run..."
    
    if kamal deploy --dry-run &> /dev/null; then
        print_status "Kamal dry run: OK"
    else
        print_warning "Kamal dry run failed (this might be expected)"
    fi
}

# Test 8: Check application health endpoint
test_health_endpoint() {
    print_info "Testing application health endpoint..."
    
    if curl -f -s --max-time 10 https://array.jleb.dev/up &> /dev/null; then
        print_status "Application health endpoint: OK"
    else
        print_warning "Application health endpoint: Not responding (app might be down)"
    fi
}

# Run all tests
run_tests() {
    local failed_tests=0
    
    test_project_structure || ((failed_tests++))
    test_kamal_config || ((failed_tests++))
    test_environment_variables || ((failed_tests++))
    test_ssh_connections || ((failed_tests++))
    test_registry_access || ((failed_tests++))
    test_github_workflow || ((failed_tests++))
    test_dry_run || ((failed_tests++))
    test_health_endpoint || ((failed_tests++))
    
    echo ""
    if [ $failed_tests -eq 0 ]; then
        print_status "All tests passed! Your deployment setup looks good. 🎉"
        echo ""
        print_info "Next steps:"
        echo "1. Set up GitHub secrets using: bin/setup-github-secrets"
        echo "2. Push to main branch to trigger deployment"
        echo "3. Or manually trigger deployment from GitHub Actions"
    else
        print_warning "$failed_tests test(s) failed or had warnings."
        echo ""
        print_info "Please address the issues above before deploying."
    fi
}

# Show usage if help requested
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h     Show this help message"
    echo "  --verbose, -v  Show verbose output"
    echo ""
    echo "This script tests your Kamal deployment setup locally."
    echo "Run it before setting up GitHub Actions deployment."
    exit 0
fi

# Set verbose mode if requested
if [ "$1" = "--verbose" ] || [ "$1" = "-v" ]; then
    set -x
fi

# Run the tests
run_tests